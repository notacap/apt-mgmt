# Generated by Django 5.2.3 on 2025-07-12 01:23

from django.db import migrations

def populate_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Create groups
    landlord_group, _ = Group.objects.get_or_create(name='Landlords')
    employee_group, _ = Group.objects.get_or_create(name='Employees')
    tenant_group, _ = Group.objects.get_or_create(name='Tenants')
    
    # Define permissions for each role - use try/except for test databases
    try:
        user_content_type = ContentType.objects.get(app_label='users', model='user')
        property_content_type = ContentType.objects.get(app_label='properties', model='property')
        unit_content_type = ContentType.objects.get(app_label='properties', model='apartmentunit')
        invitation_content_type = ContentType.objects.get(app_label='users', model='invitation')
    except ContentType.DoesNotExist:
        # Skip permission setup if content types don't exist (e.g., in test databases)
        return

    try:
        landlord_permissions = [
            Permission.objects.get(codename='view_user', content_type=user_content_type),
            Permission.objects.get(codename='add_user', content_type=user_content_type),
            Permission.objects.get(codename='change_user', content_type=user_content_type),
            Permission.objects.get(codename='view_property', content_type=property_content_type),
            Permission.objects.get(codename='add_property', content_type=property_content_type),
            Permission.objects.get(codename='change_property', content_type=property_content_type),
            Permission.objects.get(codename='delete_property', content_type=property_content_type),
            Permission.objects.get(codename='view_apartmentunit', content_type=unit_content_type),
            Permission.objects.get(codename='add_apartmentunit', content_type=unit_content_type),
            Permission.objects.get(codename='change_apartmentunit', content_type=unit_content_type),
            Permission.objects.get(codename='delete_apartmentunit', content_type=unit_content_type),
            Permission.objects.get(codename='view_invitation', content_type=invitation_content_type),
            Permission.objects.get(codename='add_invitation', content_type=invitation_content_type),
            Permission.objects.get(codename='delete_invitation', content_type=invitation_content_type),
        ]

        employee_permissions = [
            Permission.objects.get(codename='view_user', content_type=user_content_type),
            Permission.objects.get(codename='view_property', content_type=property_content_type),
            Permission.objects.get(codename='view_apartmentunit', content_type=unit_content_type),
            Permission.objects.get(codename='view_invitation', content_type=invitation_content_type),
            Permission.objects.get(codename='add_invitation', content_type=invitation_content_type),
        ]
        
        tenant_permissions = [
            Permission.objects.get(codename='view_user', content_type=user_content_type),
            Permission.objects.get(codename='view_property', content_type=property_content_type),
            Permission.objects.get(codename='view_apartmentunit', content_type=unit_content_type),
        ]

        landlord_group.permissions.set(landlord_permissions)
        employee_group.permissions.set(employee_permissions)
        tenant_group.permissions.set(tenant_permissions)
    except Permission.DoesNotExist:
        # Skip permission assignment if permissions don't exist
        pass

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_groups),
    ]
